import scrapy
import usaddress
import re
import csv

from ..items import laparrillaItem


class laparrillaSpider(scrapy.Spider):
    name = 'laparrillascrapper'
    start_urls = ['https://laparrilla.com/locations/']

    def write_output(data):
        with open('data.csv', mode='w') as output_file:
            writer = csv.writer(output_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_ALL)

            # Header
            writer.writerow(
                ["locator_domain", "location_name", "street_address", "city", "state", "zip", "country_code",
                 "store_number", "phone", "location_type", "latitude", "longitude", "hours_of_operation"])
            # Body
            for row in data:
                writer.writerow(row)

    def parse(self, response):
        # extract all address from all the store locations
        all_address = response.css('.icon-box-desc p::text').extract()
        # had some challenges with 1 address field here and this might
        # not be a neat solution but will look at it again
        # create a filter to remove '\nPhone:' strings in the list
        all_addresses = list(filter(lambda a: a != '\nPhone: ', all_address))
        all_addresses = list(filter(lambda a: a != '\n31210', all_addresses))
        # extract all phone numbers from the store locations
        phones = response.css('#theme-page a::text').extract()
        # extract all phones into a list container 'phones' above
        # phones = response.css('div.icon-box-content p > a::text').extract()
        location_names = response.css('.icon-box-title::text').extract()
        for raw_address, phone, location_name in zip(all_addresses, phones, location_names):
            # initialize item instance from laparrillaItem() class
            item = laparrillaItem()
            locator_domain = response.url
            raw_address = usaddress.tag(raw_address)
            # test the key, values pairs from
            # the raw_address for each item variable
            for key, value in raw_address[0].items():
                if key == 'AddressNumber':
                    street_address = value
                if key == 'StreetName':
                    street_address = street_address + " "+value
                if key == 'StreetNamePostType':
                    street_address = street_address+" "+value
                if key == 'StreetNamePreDirectional':
                    street_address = street_address+" "+value
                if key == 'OccupancyType':
                    street_address = street_address + " " + value
                if key == 'OccupancyIdentifier':
                    street_address = street_address + " " + value
                if key == 'PlaceName':
                    city = value
                if key == 'StateName':
                    state = value
                else:
                    pass
                if key == 'ZipCode':
                    if value is 'Null':
                        zip_code = '<MISSING>'
                    else:
                        zip_code = value
            country_code = 'US'
            store_number = '<MISSING>'
            location_type = '<MISSING>'
            latitude = '<MISSING>'
            longitude = '<MISSING>'
            hour = response.css('p+ p span::text').extract() # best hour of operation
            hours_of_operation = hour[0]+" "+hour[1]+hour[2]+ hour[3]+hour[4]+" "+hour[5].strip()+" "+hour[6].strip()+" "+hour[7]+hour[8]+": "+hour[10].strip()

            # Add scrapy items
            # Add fields to scrapy items

            item['locator_domain'] = locator_domain
            item['location_name'] = location_name
            item['street_address'] = street_address
            item['city'] = city
            item['state'] = state[:2]
            item['zip'] = zip_code
            item['country_code'] = country_code
            item['store_number'] = store_number
            item['phone'] = phone.strip()
            item['location_type'] = location_type
            item['latitude'] = latitude
            item['longitude'] = longitude
            item['hours_of_operation'] = hours_of_operation

            yield item
