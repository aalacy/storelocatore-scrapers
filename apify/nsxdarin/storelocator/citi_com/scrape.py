import csv
import urllib2
from sgrequests import SgRequests
import json
from sgzip import sgzip

session = SgRequests()
headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36',
           'content-type': 'application/json; charset=UTF-8',
           'countrycode': 'US',
           'scope': 'VISITOR',
           'sec-fetch-mode': 'cors',
           'sec-fetch-site': 'same-origin',
           'client_id': '4a51fb19-a1a7-4247-bc7e-18aa56dd1c40'
           }

def write_output(data):
    with open('data.csv', mode='w') as output_file:
        writer = csv.writer(output_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_ALL)
        writer.writerow(["locator_domain", "page_url", "location_name", "street_address", "city", "state", "zip", "country_code", "store_number", "phone", "location_type", "latitude", "longitude", "hours_of_operation"])
        for row in data:
            writer.writerow(row)

def fetch_data():
    ids = []
    url = 'https://online.citi.com/gcgapi/prod/public/v1/geoLocations/places/retrieve'
    metros = ['40.714,-74.007','34.052,-118.243','41.882,-87.628','29.76,-95.363','33.448,-112.074','39.952,-75.164','29.423,-98.49','32.716,-117.165','32.781,-96.797','37.336,-121.891','30.268,-97.743','30.328,-81.657','32.754,-97.331','39.962,-83.001','37.78,-122.414','35.227,-80.843','39.769,-86.158','47.607,-122.338','39.739,-104.987','38.895,-77.036','42.359,-71.057','31.76,-106.488','42.332,-83.047','36.164,-86.783','45.519,-122.679','35.146,-90.052','35.468,-97.516','36.171,-115.144','38.257,-85.757','39.289,-76.615','43.042,-87.905','35.084,-106.652','32.222,-110.973','36.737,-119.789','33.415,-111.831','38.577,-121.496','33.749,-84.39','39.104,-94.583','38.832,-104.822','25.774,-80.192','35.78,-78.639','41.26,-95.94','33.768,-118.192','36.845,-75.974','37.804,-122.271','44.977,-93.272','36.153,-95.991','32.737,-97.107','27.949,-82.458','29.957,-90.063','37.686,-97.338','41.5,-81.694','35.373,-119.019','39.726,-104.847','33.833,-117.913','21.306,-157.86','33.745,-117.868','33.983,-117.374','27.797,-97.395','38.047,-84.498','37.955,-121.293','36.03,-114.983','44.946,-93.094','38.626,-90.191','39.105,-84.514','40.441,-80.003','36.073,-79.792','61.218,-149.885','33.02,-96.698','40.809,-96.7','28.543,-81.378','33.684,-117.796','40.736,-74.172','41.651,-83.542','35.995,-78.901','32.64,-117.082','41.08,-85.14','40.732,-74.063','27.771,-82.637','27.506,-99.503','43.074,-89.383','33.306,-111.841','42.886,-78.878','33.585,-101.846','33.495,-111.926','39.529,-119.814','33.539,-112.186','33.354,-111.79','36.095,-80.244','36.202,-115.12','36.848,-76.292','36.809,-76.271','32.913,-96.639','32.814,-96.946','25.846,-80.268','37.549,-121.988','43.615,-116.202','37.546,-77.453','30.443,-91.184','47.657,-117.418','41.587,-93.626','47.253,-122.44','34.106,-117.292','37.639,-120.997','34.101,-117.436','34.38,-118.541','33.514,-86.806','34.198,-119.177','35.053,-78.878','33.936,-117.229','43.156,-77.613','34.143,-118.258','33.659,-118','40.769,-111.891','42.963,-85.668','35.207,-101.836','40.932,-73.899','41.758,-88.315','32.378,-86.301','41.085,-81.517','34.747,-92.288','34.73,-86.586','33.476,-81.966','27.276,-80.355','32.745,-97.004','32.469,-84.988','30.438,-84.282','38.986,-94.668','33.415,-111.909','33.197,-96.616','30.691,-88.046','26.563,-81.95','32.514,-93.748','33.151,-96.825','35.962,-83.918','42.263,-71.802','25.902,-97.498','45.63,-122.677','26.119,-80.143','43.547,-96.727','34.063,-117.651','35.05,-85.31','41.824,-71.413','36.98,-76.431','34.107,-117.594','38.44,-122.713','33.195,-117.384','44.939,-123.032','38.409,-121.371','33.775,-117.941','26.002,-80.223','33.582,-112.238','44.05,-123.093','33.876,-117.567','35.787,-78.783','37.209,-93.292','40.587,-105.077','32.3,-90.186','38.805,-77.047','37.671,-122.085','34.697,-118.148','39.705,-105.081','36.528,-87.361','34.58,-118.117','36.678,-121.655','42.101,-72.589','26.011,-80.149','29.691,-95.209','37.369,-122.037','32.838,-83.628','39.116,-94.627','34.059,-117.752','33.122,-117.081','31.117,-97.73','41.774,-88.148','41.525,-88.082','47.617,-122.202','42.271,-89.095','32.079,-81.091','40.917,-74.172','33.836,-118.34','41.198,-73.194','26.203,-98.231','32.767,-96.599','43.047,-76.149','31.998,-102.074','34.148,-118.143','35.846,-86.392','25.987,-80.238','39.758,-84.191','33.87,-117.924','38.882,-94.82','33.788,-117.853','39.871,-104.972','38.752,-121.288','33.215,-97.132','31.557,-97.132','33.63,-112.377','32.954,-96.89','40.697,-111.996','32.776,-79.931','42.492,-83.028','37.026,-76.344','29.652,-82.325','36.33,-119.292','26.273,-80.266','34.001,-81.034','41.978,-91.664','42.58,-83.03','41.313,-72.931','41.124,-73.567','37.977,-122.034','47.381,-122.231','37.354,-121.954','40.665,-74.215','30.509,-97.679','34.175,-118.845','30.223,-92.02','33.958,-83.375','39.05,-95.677','34.272,-118.779','46.874,-96.788','35.221,-97.443','38.952,-92.329','32.449,-99.733','34.235,-77.949','41.761,-72.689','34.537,-117.294','29.564,-95.286','38.101,-122.255','42.281,-83.748','37.871,-122.268','40.602,-75.472','32.949,-96.732','31.848,-102.369','39.802,-105.081','42.376,-71.117','29.595,-95.621','30.082,-94.098','42.734,-84.552','37.97,-87.574','44.023,-92.463','39.092,-94.416','38.249,-122.04','40.234,-111.659','27.966,-82.8','30.628,-96.335','40.61,-111.939','33.158,-117.351','34.073,-118.032','33.554,-117.214','33.493,-117.149','39.801,-89.655','28.035,-80.622','33.641,-117.919','39.835,-105.034','32.854,-79.974','25.941,-80.245','42.991,-71.463','35.957,-80.006','33.94,-118.133','36.825,-119.7','26.232,-80.126','38.256,-104.624','42.037,-88.284','42.645,-71.313','38.005,-121.806','26.713,-80.052','40.693,-89.591','47.979,-122.202','34.281,-119.301','39.586,-104.885','28.045,-81.956','45.498,-122.431','37.936,-122.348','45.783,-108.507','33.962,-118.352','36.052,-95.791','33.925,-84.379','33.999,-117.475','45.523,-122.99','41.554,-73.043','34.953,-120.436','40.018,-105.278','40.425,-104.694','37.706,-122.462','43.605,-116.392','33.046,-96.994','26.073,-80.232','34.069,-117.938','29.508,-95.095','32.351,-95.301','33.902,-118.083','37.564,-122.324','44.516,-88.008','33.912,-98.492','39.535,-119.753','40.076,-74.199','34.182,-118.31','34.099,-117.37','33.103,-96.67','32.795,-116.962','32.31,-106.779','47.48,-122.208','41.522,-90.576','41.676,-86.252','33.202,-117.244','33.206,-87.567','42.591,-82.936','40.512,-74.387','40.564,-74.301','31.464,-100.437','42.584,-87.823','38.357,-121.986']
    for metro in metros:
        x = metro.split(',')[0]
        y = metro.split(',')[1]
        print('%s - %s...' % (str(x), str(y)))
        payload = '{"type":"branchesAndATMs","inputLocation":[' + str(y) + ',' + str(x) + '],"resultCount":"500","distanceUnit":"MILE","findWithinRadius":"500"}'
        payload = json.loads(payload)
        r = session.post(url, headers=headers, data=json.dumps(payload))
        for line in r.iter_lines():
            if '"name":"' in line:
                items = line.split('"type":"Point"')
                for item in items:
                    if '{"type":"FeatureCollection"' not in item:
                        if '"additionalProperties":{"type":"branch' in item:
                            name = item.split('"name":"')[1].split('"')[0]
                            state = item.split('"state":"')[1].split('"')[0].upper()
                            add = item.split('"addressLine1":"')[1].split('"')[0].title()
                            zc = item.split('"postalCode":"')[1].split('"')[0]
                            city = item.split('"city":"')[1].split('"')[0].title()
                            lng = item.split('"coordinates":[')[1].split(',')[0]
                            lat = item.split('"coordinates":[')[1].split(',')[1].split(']')[0]
                            phone = item.split('"phone":"')[1].split('"')[0]
                            country = item.split('"country":"')[1].split('"')[0]
                            typ = 'Branch'
                            website = 'citi.com'
                            store = item.split('"branchid":')[1].split(',')[0].replace('.0','')
                            hours = item.split('"hoursTeller":{')[1].split('}')[0].replace('":"','-').replace('"','').replace(',',', ')
                            lurl = '<MISSING>'
                            if store not in ids and 'america' in country:
                                country = 'US'
                                ids.append(store)
                                print('Pulling Store ID #%s...' % store)
                                yield [website, lurl, name, add, city, state, zc, country, store, phone, typ, lat, lng, hours]

    for coord in sgzip.coords_for_radius(50):
        x = float(coord[0])
        y = float(coord[1])
        x = str(round(x, 2))
        y = str(round(y, 2))
        print('%s - %s...' % (str(x), str(y)))
        payload = '{"type":"branchesAndATMs","inputLocation":[' + str(y) + ',' + str(x) + '],"resultCount":"500","distanceUnit":"MILE","findWithinRadius":"500"}'
        payload = json.loads(payload)
        r = session.post(url, headers=headers, data=json.dumps(payload))
        for line in r.iter_lines():
            if '"name":"' in line:
                items = line.split('"type":"Point"')
                for item in items:
                    if '{"type":"FeatureCollection"' not in item:
                        if '"additionalProperties":{"type":"branch' in item:
                            name = item.split('"name":"')[1].split('"')[0]
                            state = item.split('"state":"')[1].split('"')[0].upper()
                            add = item.split('"addressLine1":"')[1].split('"')[0].title()
                            zc = item.split('"postalCode":"')[1].split('"')[0]
                            city = item.split('"city":"')[1].split('"')[0].title()
                            lng = item.split('"coordinates":[')[1].split(',')[0]
                            lat = item.split('"coordinates":[')[1].split(',')[1].split(']')[0]
                            phone = item.split('"phone":"')[1].split('"')[0]
                            country = item.split('"country":"')[1].split('"')[0]
                            typ = 'Branch'
                            website = 'citi.com'
                            store = item.split('"branchid":')[1].split(',')[0].replace('.0','')
                            hours = item.split('"hoursTeller":{')[1].split('}')[0].replace('":"','-').replace('"','').replace(',',', ')
                            lurl = '<MISSING>'
                            if store not in ids and 'america' in country:
                                country = 'US'
                                ids.append(store)
                                print('Pulling Store ID #%s...' % store)
                                yield [website, lurl, name, add, city, state, zc, country, store, phone, typ, lat, lng, hours]

def scrape():
    data = fetch_data()
    write_output(data)

scrape()
